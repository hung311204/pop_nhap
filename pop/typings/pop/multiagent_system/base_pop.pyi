"""
This type stub file was generated by pyright.
"""

import dgl
import networkx as nx
from abc import abstractmethod
from typing import Any, Dict, Optional, Tuple
from grid2op.Agent import AgentWithConverter
from grid2op.Environment import BaseEnv
from grid2op.Observation import BaseObservation
from pop.agents.loggable_module import LoggableModule
from pop.configs.architecture import Architecture
from pop.multiagent_system.space_factorization import EncodedAction, Substation
from pop.networks.serializable_module import SerializableModule

class BasePOP(AgentWithConverter, SerializableModule, LoggableModule):
    def __init__(self, env: BaseEnv, name: str, architecture: Architecture, training: bool, seed: int, checkpoint_dir: Optional[str] = ..., tensorboard_dir: Optional[str] = ..., device: Optional[str] = ...) -> None:
        ...
    
    @abstractmethod
    def get_action(self, observation: dgl.DGLHeteroGraph) -> int:
        """
        Method to get System action given manager's action encoded in the observation
        """
        ...
    
    def my_act(self, transformed_observation: Tuple[Dict[Substation, Optional[dgl.DGLHeteroGraph]], nx.Graph], reward: float, done=...) -> EncodedAction:
        """
        Method implicitly called by act().
        By calling act(observation) you are actually calling my_act(convert_obs(observation))
        This method is inherited from AgentWithConverter from Grid2Op
        """
        ...
    
    def convert_obs(self, observation: BaseObservation) -> Tuple[Dict[Substation, Optional[dgl.DGLHeteroGraph]], nx.Graph]:
        """
        Upon calling act(observation)
        The agent calls my_act(convert_obs(observation))
        This method is thus an implicit observation converter for the agent.
        Inherited from AgentWithConverter (Grid2Op)
        """
        ...
    
    def step(self, action: EncodedAction, observation: BaseObservation, reward: float, next_observation: BaseObservation, done: bool): # -> None:
        ...
    
    def get_state(self: BasePOP) -> Dict[str, Any]:
        """
        Get System state
        Children may use this as a starting point for reporting system state
        """
        ...
    
    def retrieve_promises_batched(self, promises: list, batch_size: int) -> list:
        ...
    
    @staticmethod
    def exponential_decay(initial_value: float, half_life: float, t: float): # -> float | Literal[0]:
        ...
    


def train(env: BaseEnv, iterations: int, dpop, save_frequency: int = ...): # -> None:
    ...

