"""
This type stub file was generated by pyright.
"""

import networkx as nx
from typing import Dict, List, Optional, Set, Tuple
from grid2op.Converter import IdToAct
from torch import Tensor
from pop.community_detection.community_detector import Community
from pop.multiagent_system.fixed_set import FixedSet

class LoggableModule:
    def __init__(self, tensorboard_dir: Optional[str] = ...) -> None:
        ...
    
    def is_logging_active(self) -> bool:
        ...
    
    def log_simple_scalar(self, losses: Dict[str, float], train_steps: int, scalar_name: str = ...): # -> None:
        ...
    
    def log_step(self, losses: List[Optional[float]], implicit_rewards: List[float], names: List[str], train_steps: int): # -> None:
        ...
    
    def log_action_space_size(self, agent_converters: Dict[int, IdToAct]) -> None:
        ...
    
    def log_alive_steps(self, alive_steps: int, episodes: int): # -> None:
        ...
    
    def log_agents_loss(self, losses: List[float], agent_learning_steps: int): # -> None:
        ...
    
    def log_communities(self, communities: List[Community], train_steps: int): # -> None:
        ...
    
    def log_graph(self, graph: nx.Graph, train_steps: int): # -> None:
        ...
    
    def log_agents_embedding_histograms(self, q_network_states: Tensor, target_network_states: Tensor, agent_learning_steps: int): # -> None:
        ...
    
    def log_system_behaviour(self, best_action: int, best_action_str: str, head_manager_action: int, manager_actions: Dict[FixedSet, Tuple[int, int]], agent_actions: Dict[int, int], train_steps: int) -> None:
        ...
    
    def log_head_manager_behaviour(self, best_action: int, best_action_str: str, train_steps: int) -> None:
        ...
    
    def log_managers_behaviour(self, actions_communities: Dict[Set[int], Tuple[int, int]], train_steps: int): # -> None:
        ...
    
    def log_agents_behaviour(self, agent_actions: Dict[int, int], train_steps: int): # -> None:
        ...
    
    def log_reward(self, reward: float, train_steps: int): # -> None:
        ...
    


