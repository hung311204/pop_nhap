"""
This type stub file was generated by pyright.
"""

import networkx as nx
from abc import ABC
from typing import Any, Dict, List, Optional, OrderedDict, Tuple
from dgl import DGLHeteroGraph
from grid2op.Observation import BaseObservation
from torch import Tensor
from pop.agents.loggable_module import LoggableModule
from pop.agents.replay_buffer import ReplayMemory, Transition
from pop.configs.agent_architecture import AgentArchitecture
from pop.networks.serializable_module import SerializableModule

class BaseGCNAgent(SerializableModule, LoggableModule, ABC):
    target_network_name_suffix: str = ...
    q_network_name_suffix: str = ...
    optimizer_class: str = ...
    def __init__(self, agent_actions: Optional[int], node_features: Optional[int], architecture: Optional[AgentArchitecture], training: bool, name: str, device: str, log_dir: Optional[str], tensorboard_dir: Optional[str], edge_features: Optional[int] = ...) -> None:
        ...
    
    def get_name(self): # -> str:
        ...
    
    def set_cpu_affinity(self, cpus: List[int]): # -> None:
        ...
    
    def compute_loss(self, transitions_batch: Transition, sampling_weights: Tensor) -> Tuple[Tensor, Tensor]:
        ...
    
    def get_memory(self) -> ReplayMemory:
        ...
    
    def take_action(self, transformed_observation: DGLHeteroGraph, mask: Optional[List[int]] = ...) -> int:
        ...
    
    def update_mem(self, observation: DGLHeteroGraph, action: int, reward: float, next_observation: DGLHeteroGraph, done: bool) -> None:
        ...
    
    def learn(self) -> Optional[float]:
        ...
    
    def step(self, observation: DGLHeteroGraph, action: int, reward: float, next_observation: DGLHeteroGraph, done: bool, stop_decay: bool = ...) -> Tuple[Optional[float], float]:
        ...
    
    def get_state(self) -> Dict[str, Any]:
        ...
    
    def load_state(self, optimizer_state: dict, q_network_state: OrderedDict[str, Tensor], target_network_state: OrderedDict[str, Tensor], memory: dict, exploration: dict, alive_steps: int, train_steps: int, learning_steps: int) -> None:
        ...
    
    @staticmethod
    def batch_observations(graphs: List[DGLHeteroGraph]) -> DGLHeteroGraph:
        ...
    
    @staticmethod
    def to_dgl(obs: BaseObservation, device: str) -> DGLHeteroGraph:
        ...
    
    @staticmethod
    def from_networkx_to_dgl(graph: nx.Graph, device: str) -> DGLHeteroGraph:
        ...
    


